module Absfolp where

-- Haskell module generated by the BNF converter

newtype Var = Var String deriving (Eq,Ord,Show)
newtype Pattern = Pattern String deriving (Eq,Ord,Show)
newtype Ident = Ident String deriving (Eq, Ord, Show)


data Ltm =
   LTMC [MemSegment]
  deriving (Eq,Ord,Show)

data MemSegment =
   Taut [Exp]
 | Nontaut [Exp]
 | Contr [Exp]
 | Noncontr [Exp]
  deriving (Eq,Ord,Show)

data Exp =
   EEquiv Exp Exp
 | EEqual Exp Exp
 | EImplies Exp Exp
 | EOr Exp Exp
 | EAnd Exp Exp
 | ENot Exp
 | EFalse
 | ETrue
 | EPattern Pattern
 | EPred Pred
 | EForAll Var ODom Exp
 | EExists Var ODom Exp
 | ECtx Exp [VCtx]
 | ESensVar Ident Int
 | ENull
  deriving (Eq,Ord,Show)

data Pred =
   EPBlue Atom
 | EPRed Atom
 | EPYellow Atom
 | EPEdge Atom Atom
  deriving (Eq,Ord,Show)

data Atom =
   AVar Var
 | AConst Integer
  deriving (Eq,Ord)

data ODom =
   OptDom [Integer]
 | EmptyOptDom
  deriving (Eq,Ord,Show)

data VCtx =
   Ctxt Var Integer
  deriving (Eq,Ord,Show)

instance Show Atom where
    show (AVar (Var v)) = v
    show (AConst c) = show c
